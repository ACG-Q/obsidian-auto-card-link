name: Release Obsidian Plugin

on:
  push:
    tags:
      - "v*"

env:
  PLUGIN_NAME: auto-card-link
  BUILD_DIR: dist

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Log checkout info
        env:
          GIT_LOG: ${{ github.event.head_commit.message }}
        run: |
          echo "ℹ️ 正在检出代码库..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "触发提交: $GITHUB_SHA"
          echo "提交信息: $GIT_LOG"
          echo "标签版本: $GITHUB_REF_NAME"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"
          
      - name: Log Node.js info
        run: |
          echo "✅ Node.js 环境已配置"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          node -v
          npm -v

      - name: Install dependencies
        run: |
          echo "📦 正在安装项目依赖..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          npm ci --prefer-offline
          echo "已安装依赖项:"
          npm list --depth=0

      - name: Set Version
        run: |
          echo "ℹ️ 正在设置版本号..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "当前版本号: ${{ github.ref_name }}"
          npm version ${{ github.ref_name }} --no-git-tag-version
          npm run version

      - name: Build project
        run: |
          echo "🏗️ 开始构建项目..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          npm run build

      - name: Package artifacts
        id: package
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          OUTPUT_DIR="${{ env.BUILD_DIR }}/${{ env.PLUGIN_NAME }}"
          
          echo "📦 打包版本: v$VERSION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "输出目录: $OUTPUT_DIR"
          
          mkdir -p $OUTPUT_DIR
          echo "复制核心文件..."
          cp -v {main.js,manifest.json,styles.css} $OUTPUT_DIR
          
          echo "最终打包内容:"
          tree $OUTPUT_DIR
          
          cd ${{ env.BUILD_DIR }}
          echo "正在创建 ZIP 包..."
          zip -r ${{ env.PLUGIN_NAME }}-$VERSION.zip ${{ env.PLUGIN_NAME }}
          
          echo "生成元数据:"
          echo "zip_name=${{ env.PLUGIN_NAME }}-$VERSION.zip" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          echo "📦 包文件信息:"
          ls -lh ${{ env.PLUGIN_NAME }}-*.zip

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "v${{ steps.package.outputs.version }}"
          body: "Auto-generated release for version ${{ steps.package.outputs.version }}"
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          files: |
            ${{ env.BUILD_DIR }}/${{ steps.package.outputs.zip_name }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Log release info
        run: |
          echo "🚀 正在创建发布..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "发布版本: v${{ steps.package.outputs.version }}"
          echo "包文件路径: ${{ env.BUILD_DIR }}/${{ steps.package.outputs.zip_name }}"
          echo "预发布标记: ${{ contains(github.ref, '-') }}"

      - name: Log release status
        if: success()
        run: |
          echo "✅ 发布成功完成"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "最终版本号: v${{ steps.package.outputs.version }}"
          echo "包文件名称: ${{ steps.package.outputs.zip_name }}"
          echo "文件大小: $(du -h ${{ env.BUILD_DIR }}/${{ steps.package.outputs.zip_name }} | cut -f1)"
          echo "发布时间: $(date +'%Y-%m-%d %H:%M:%S %Z')"
    
      - name: Commit changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add manifest.json versions.json package.json
          git commit -m "chore: update version to ${{ github.ref_name }}"
          git push origin HEAD:main